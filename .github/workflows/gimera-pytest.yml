# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on:
  push:
    branches:
      - stage

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest click inquirer pyyaml
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    # - name: Lint with flake8
    #   run: |
    #     # stop the build if there are Python syntax errors or undefined names
    #     flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    #     # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
    #     flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics



    # - name: Test with pytest
    #   run: |
    #     git config --global user.email test@gimera.de
    #     git config --global user.name gimera
    #     pytest

    - name: increment version
      run: |
        python3 << EOF
        import re
        from pathlib import Path
        file = Path('setup.cfg')
        lines = file.read_text()
        find = re.findall(r'version = (.*)', lines)
        old_version = 'version = ' + find[-1]
        version = list(map(int, find[-1].split('.')))
        version[-1] += 1
        version_string = '.'.join(map(str, version))
        new_version = 'version = ' + version_string
        lines = lines.replace(old_version, new_version)
        file.write_text(lines)
        Path(".version").write_text(version_string)
        EOF

    - name: tag version
      run: |
        #git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
        #git config user.name "$GITHUB_ACTOR"
        VERSION=$(cat .version)
        git tag ${VERSION}

    - name: set ssh-key
      run: |
        mkdir ~/.ssh
        echo "${{secrets.SSH_KEY}}" > ~/.ssh/id_rsa
        chown 400 ~/.ssh/id_rsa
    - name: push
      run: |
        git add .
        git remote remove origin
        git remote add origin git@github.com:marcwimmer/gimera
        git fetch
        git merge origin/main
        git push origin --tags stage:main

    # - name: Publish to PyPi
    #   uses: pypa/gh-action-pypi-publish@release/v1
    #   with:
    #     password: ${{ secrets.PYPI_API_TOKEN }}